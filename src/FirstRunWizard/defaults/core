// ~/.csxx/core.nsh is executed by dotnet-shell for all interactive shells.
// see https://github.com/dotnet-shell/ExampleScripts for more examples

// Default includes
using System.Runtime.InteropServices;
using System.Drawing;
using Dotnet.Shell.UI;

// Custom prompt handling, this handler autodetects if powerline is availiable on Linux environments
// Otherwise if falls back to an acceptable default
bool? powerline = null;
#region c#
Shell.Prompt = () => 
#endregion
{
      if (powerline == null && RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
      {
          var powerlineHelpOut=`powerline -h`;
          powerline = !string.IsNullOrWhiteSpace(powerlineHelpOut);
      }

      if (powerline == true)
      {
          string powerLinePrompt=`powerline-render shell left --last-exit-code=$Shell.LastExitCode$`;
          return new ColorString("!", Color.Green, Color.LightBlue) + ColorString.FromRawANSI( powerLinePrompt );
      }
      else
      {
          return new ColorString("!" + Environment.UserName + "@" + Environment.MachineName, Color.Green) + new ColorString(" " + Shell.WorkingDirectory + ">", Color.Blue) + " ";
      }
};

// Add paths to Shell environment
if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
{
    Shell.Paths.Add("/bin");
    Shell.Paths.Add("/sbin");
    Shell.Paths.Add("/usr/bin");
    Shell.Paths.Add("/usr/sbin");
    Shell.Paths.Add("/usr/local/bin");
    Shell.Paths.Add("/usr/local/sbin");

    var userExes = Path.Combine(Shell.HomeDirectory, ".local", "bin");
    if (Directory.Exists(userExes))
    {
        Shell.Paths.Add(userExes);
    }

    var dotnetTools = Path.Combine(Shell.HomeDirectory, ".dotnet", "tools");
    if (Directory.Exists(dotnetTools))
    {
        Shell.Paths.Add(dotnetTools);
    }
}
else
{
    Shell.Paths.Add("C:\\Windows");
    Shell.Paths.Add("C:\\Windows\\System32");
}

// Load user functions store in homedir
var functionsDir = Path.Combine(Shell.HomeDirectory, Shell.DefaultScriptExtension, "functions");
if (Directory.Exists(functionsDir))
{
    var functions = new List<string>();
    functions.AddRange(Directory.GetFiles(functionsDir, "*.csx*"));
    functions.AddRange(Directory.GetFiles(functionsDir, "*"+Shell.DefaultScriptExtension));
    foreach (var file in functions.OrderBy(q => q))
    {
        #load $file$
    }
}

// Load user command/script aliases
var aliasesFile = Path.Combine(Shell.HomeDirectory, Shell.DefaultScriptExtension, "aliases"+Shell.DefaultScriptExtension);
if (File.Exists(aliasesFile))
{
    #load $aliasesFile$
}

if (!RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
{
    Console.WriteLine(new ColorString("This OS is currently in beta!", Color.Red).TextWithFormattingCharacters);
}

// Ensure we start in the users homedir
cd ~
